name: Build Android Library Only

on:
  workflow_dispatch:
    inputs:
      upload-artifact:
        type: boolean
        default: true
        description: 'Upload artifacts to GitHub'
      target-arch:
        type: choice
        description: 'Target architecture'
        default: 'all'
        options:
          - 'all'
          - 'aarch64'
          - 'armv7'
          - 'x86_64'

env:
  RUST_VERSION: "1.75" # https://github.com/rustdesk/rustdesk/discussions/7503
  CARGO_NDK_VERSION: "3.1.2"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.24.5"
  ANDROID_FLUTTER_VERSION: "3.24.5"
  TAG_NAME: "android-lib-build"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  # vcpkg version: 2025.01.13
  VCPKG_COMMIT_ID: "6f29f12e82a8293156836ad81cc9bf5af41fe836"
  VERSION: "1.4.1"
  NDK_VERSION: "r27c"
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"

jobs:
  generate-bridge:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install prerequisites
        run: |
          sudo apt-get install ca-certificates -y
          sudo apt-get update -y
          sudo apt-get install -y \
            clang \
            cmake \
            curl \
            gcc \
            git \
            g++ \
            libclang-dev \
            libgtk-3-dev \
            llvm-dev \
            nasm \
            ninja-build \
            pkg-config \
            wget

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: x86_64-unknown-linux-gnu
          components: "rustfmt"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: bridge-ubuntu-22.04

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install flutter rust bridge deps
        shell: bash
        run: |
          cargo install cargo-expand --version "1.0.95" --locked
          cargo install flutter_rust_bridge_codegen --version "1.80.1" --features "uuid" --locked
          pushd flutter && sed -i -e 's/extended_text: 14.0.0/extended_text: 13.0.0/g' pubspec.yaml && flutter pub get && popd

      - name: Run flutter rust bridge
        run: |
          ~/.cargo/bin/flutter_rust_bridge_codegen --rust-input ./src/flutter_ffi.rs --dart-output ./flutter/lib/generated_bridge.dart --c-output ./flutter/macos/Runner/bridge_generated.h
          cp ./flutter/macos/Runner/bridge_generated.h ./flutter/ios/Runner/bridge_generated.h

      - name: Upload Artifact
        uses: actions/upload-artifact@master
        with:
          name: bridge-artifact
          path: |
            ./src/bridge_generated.rs
            ./src/bridge_generated.io.rs
            ./flutter/lib/generated_bridge.dart
            ./flutter/lib/generated_bridge.freezed.dart
            ./flutter/macos/Runner/bridge_generated.h
            ./flutter/ios/Runner/bridge_generated.h

  build-android-lib:
    needs: [generate-bridge]
    name: build liblibrustdesk.so for ${{ matrix.job.arch }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              arch: aarch64,
              target: aarch64-linux-android,
              os: ubuntu-24.04,
              android-abi: arm64-v8a,
            }
          - {
              arch: armv7,
              target: armv7-linux-androideabi,
              os: ubuntu-24.04,
              android-abi: armeabi-v7a,
            }
          - {
              arch: x86_64,
              target: x86_64-linux-android,
              os: ubuntu-24.04,
              android-abi: x86_64,
            }
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: false
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: false

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
               clang \
               cmake \
               curl \
               gcc-multilib \
               git \
               g++ \
               g++-multilib \
               libayatana-appindicator3-dev \
               libasound2-dev \
               libc6-dev \
               libclang-dev \
               libunwind-dev \
               libgstreamer1.0-dev \
               libgstreamer-plugins-base1.0-dev \
               libgtk-3-dev \
               libpam0g-dev \
               libpulse-dev \
               libva-dev \
               libxcb-randr0-dev \
               libxcb-shape0-dev \
               libxcb-xfixes0-dev \
               libxdo-dev \
               libxfixes-dev \
               llvm-dev \
               nasm \
               ninja-build \
               openjdk-17-jdk-headless \
               pkg-config \
               tree \
               wget

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: ${{ env.NDK_VERSION }}
          add-to-path: true

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: /opt/artifacts/vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      - name: Install vcpkg dependencies
        if: ${{ inputs.target-arch == 'all' || inputs.target-arch == matrix.job.arch }}
        run: |
          if ! ./flutter/build_android_deps.sh "${{ matrix.job.android-abi }}"; then
            find "${VCPKG_ROOT}/" -name "*.log" | while read -r _1; do
              echo "$_1:"
              echo "======"
              cat "$_1"
              echo "======"
              echo ""
            done
            exit 1
          fi
        shell: bash

      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: "rustfmt"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: rustdesk-lib-cache-android-${{ matrix.job.arch }}
          key: ${{ matrix.job.target }}

      - name: Build rustdesk library
        if: ${{ inputs.target-arch == 'all' || inputs.target-arch == matrix.job.arch }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          rustup target add ${{ matrix.job.target }}
          cargo install cargo-ndk --version ${{ env.CARGO_NDK_VERSION }} --locked
          
          # Build the library
          case ${{ matrix.job.target }} in
            aarch64-linux-android)
              ./flutter/ndk_arm64.sh
            ;;
            armv7-linux-androideabi)
              ./flutter/ndk_arm.sh
            ;;
            x86_64-linux-android)
              ./flutter/ndk_x64.sh
            ;;
          esac
          
          # Verify the library was built
          ls -la ./target/${{ matrix.job.target }}/release/
          file ./target/${{ matrix.job.target }}/release/liblibrustdesk.so
          
          # Show library info
          echo "Library size: $(du -h ./target/${{ matrix.job.target }}/release/liblibrustdesk.so)"
          readelf -h ./target/${{ matrix.job.target }}/release/liblibrustdesk.so

      - name: Upload liblibrustdesk.so
        if: ${{ inputs.upload-artifact == true && (inputs.target-arch == 'all' || inputs.target-arch == matrix.job.arch) }}
        uses: actions/upload-artifact@master
        with:
          name: liblibrustdesk-${{ matrix.job.arch }}-${{ env.VERSION }}
          path: ./target/${{ matrix.job.target }}/release/liblibrustdesk.so
          retention-days: 30

      - name: Create release notes
        if: ${{ inputs.upload-artifact == true && (inputs.target-arch == 'all' || inputs.target-arch == matrix.job.arch) }}
        run: |
          echo "## Android Library Build - ${{ matrix.job.arch }}" > release-notes-${{ matrix.job.arch }}.md
          echo "" >> release-notes-${{ matrix.job.arch }}.md
          echo "- **Architecture**: ${{ matrix.job.arch }}" >> release-notes-${{ matrix.job.arch }}.md
          echo "- **Target**: ${{ matrix.job.target }}" >> release-notes-${{ matrix.job.arch }}.md
          echo "- **Android ABI**: ${{ matrix.job.android-abi }}" >> release-notes-${{ matrix.job.arch }}.md
          echo "- **Rust Version**: ${{ env.RUST_VERSION }}" >> release-notes-${{ matrix.job.arch }}.md
          echo "- **NDK Version**: ${{ env.NDK_VERSION }}" >> release-notes-${{ matrix.job.arch }}.md
          echo "- **Build Time**: $(date)" >> release-notes-${{ matrix.job.arch }}.md
          echo "- **Library Size**: $(du -h ./target/${{ matrix.job.target }}/release/liblibrustdesk.so | cut -f1)" >> release-notes-${{ matrix.job.arch }}.md
          cat release-notes-${{ matrix.job.arch }}.md

  collect-libraries:
    needs: [build-android-lib]
    runs-on: ubuntu-latest
    if: ${{ inputs.upload-artifact == true }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@master
        with:
          path: ./artifacts

      - name: Organize libraries
        run: |
          mkdir -p android-libs
          find ./artifacts -name "liblibrustdesk.so" -exec cp {} android-libs/ \;
          
          # Rename with architecture suffix for clarity
          if [ -f "./artifacts/liblibrustdesk-aarch64-${{ env.VERSION }}/liblibrustdesk.so" ]; then
            cp "./artifacts/liblibrustdesk-aarch64-${{ env.VERSION }}/liblibrustdesk.so" android-libs/liblibrustdesk-aarch64.so
          fi
          if [ -f "./artifacts/liblibrustdesk-armv7-${{ env.VERSION }}/liblibrustdesk.so" ]; then
            cp "./artifacts/liblibrustdesk-armv7-${{ env.VERSION }}/liblibrustdesk.so" android-libs/liblibrustdesk-armv7.so
          fi
          if [ -f "./artifacts/liblibrustdesk-x86_64-${{ env.VERSION }}/liblibrustdesk.so" ]; then
            cp "./artifacts/liblibrustdesk-x86_64-${{ env.VERSION }}/liblibrustdesk.so" android-libs/liblibrustdesk-x86_64.so
          fi
          
          ls -la android-libs/
          
          # Create info file
          echo "RustDesk Android Libraries - Version ${{ env.VERSION }}" > android-libs/README.md
          echo "Built on: $(date)" >> android-libs/README.md
          echo "" >> android-libs/README.md
          echo "Libraries:" >> android-libs/README.md
          for lib in android-libs/*.so; do
            if [ -f "$lib" ]; then
              echo "- $(basename $lib): $(du -h $lib | cut -f1)" >> android-libs/README.md
            fi
          done

      - name: Create archive
        run: |
          tar -czf rustdesk-android-libraries-${{ env.VERSION }}.tar.gz android-libs/
          zip -r rustdesk-android-libraries-${{ env.VERSION }}.zip android-libs/

      - name: Upload combined libraries
        uses: actions/upload-artifact@master
        with:
          name: rustdesk-android-libraries-${{ env.VERSION }}
          path: |
            rustdesk-android-libraries-${{ env.VERSION }}.tar.gz
            rustdesk-android-libraries-${{ env.VERSION }}.zip
          retention-days: 60 