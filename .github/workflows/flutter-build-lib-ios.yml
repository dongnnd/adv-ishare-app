name: Build the flutter version of the RustDesk

on:
  workflow_dispatch:
    inputs:
      upload-artifact:
        description: "Whether to upload artifacts"
        type: boolean
        default: true
      upload-tag:
        description: "Tag name for the release"
        type: string
        default: "nightly"

# NOTE: F-Droid builder script 'flutter/build_fdroid.sh' reads environment
# variables from this workflow!
#
# It does NOT read build steps, however, so please fix 'flutter/build_fdroid.sh
# whenever you add changes to Android CI build action ('build-rustdesk-android')
# in this file!

env:
  SCITER_RUST_VERSION: "1.75" # https://github.com/rustdesk/rustdesk/discussions/7503, also 1.78 has ABI change which causes our sciter version not working, https://blog.rust-lang.org/2024/03/30/i128-layout-update.html
  RUST_VERSION: "1.75" # sciter failed on m1 with 1.78 because of https://blog.rust-lang.org/2024/03/30/i128-layout-update.html
  MAC_RUST_VERSION: "1.81" # 1.81 is requred for macos, because of https://github.com/yury/cidre requires 1.81
  CARGO_NDK_VERSION: "3.1.2"
  SCITER_ARMV7_CMAKE_VERSION: "3.29.7"
  SCITER_NASM_DEBVERSION: "2.15.05-1"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.24.5"
  ANDROID_FLUTTER_VERSION: "3.24.5"
  # for arm64 linux because official Dart SDK does not work
  FLUTTER_ELINUX_VERSION: "3.16.9"
  TAG_NAME: "${{ inputs.upload-tag }}"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  # vcpkg version: 2025.01.13
  # If we change the `VCPKG COMMIT_ID`, please remember:
  # 1. Call `$VCPKG_ROOT/vcpkg x-update-baseline` to update the baseline in `vcpkg.json`.
  #  Or we may face build issue like 
  #  https://github.com/rustdesk/rustdesk/actions/runs/14414119794/job/40427970174
  # 2. Update the `VCPKG_COMMIT_ID` in `ci.yml` and `playground.yml`.
  VCPKG_COMMIT_ID: "6f29f12e82a8293156836ad81cc9bf5af41fe836"
  VERSION: "1.4.1"
  NDK_VERSION: "r27c"
  #signing keys env variable checks
  ANDROID_SIGNING_KEY: "${{ secrets.ANDROID_SIGNING_KEY }}"
  MACOS_P12_BASE64: "${{ secrets.MACOS_P12_BASE64 }}"
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"
  SIGN_BASE_URL: "${{ secrets.SIGN_BASE_URL }}"

jobs:
  generate-bridge:
    uses: ./.github/workflows/bridge.yml

  build-rustdesk-ios:
    if: ${{ inputs.upload-artifact }}
    name: build rustdesk ios ipa
    runs-on: ${{ matrix.job.os }}
    needs: [generate-bridge]
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              arch: aarch64,
              target: aarch64-apple-ios,
              os: macos-13,
              vcpkg-triplet: arm64-ios,
            }
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install dependencies
        run: |
          brew install nasm yasm
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Patch flutter
        run: |
          cd $(dirname $(dirname $(which flutter)))
          [[ "3.24.5" == ${{env.FLUTTER_VERSION}} ]] && git apply ${{ github.workspace }}/.github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      - name: Install vcpkg dependencies
        run: |
          if ! $VCPKG_ROOT/vcpkg \
            install \
            --triplet ${{ matrix.job.vcpkg-triplet }} \
            --x-install-root="$VCPKG_ROOT/installed"; then
            find "${VCPKG_ROOT}/" -name "*.log" | while read -r _1; do
              echo "$_1:"
              echo "======"
              cat "$_1"
              echo "======"
              echo ""
            done
            exit 1
          fi
          head -n 100 "${VCPKG_ROOT}/buildtrees/ffmpeg/build-${{ matrix.job.vcpkg-triplet }}-rel-out.log" || true
        shell: bash

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.job.target }}
          components: "rustfmt"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: rustdesk-lib-cache-ios
          key: ${{ matrix.job.target }}

      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

      - name: Verify vcpkg installation
        run: |
          echo "VCPKG_ROOT: ${{ env.VCPKG_ROOT }}"
          echo "VCPKG_DEFAULT_TRIPLET: ${{ matrix.job.vcpkg-triplet }}"
          echo "Checking vcpkg installation..."
          ls -la ${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include/
          ls -la ${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/lib/
          echo "FFmpeg headers:"
          find ${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include/ -name "*.h" | grep -E "(avcodec|avutil|avformat)" | head -10

      - name: Build rustdesk lib
        env:
          VCPKG_ROOT: ${{ env.VCPKG_ROOT }}
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.job.vcpkg-triplet }}
          PKG_CONFIG_PATH: ${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/lib/pkgconfig
          CMAKE_PREFIX_PATH: ${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}
          CFLAGS: "-I${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include"
          CPPFLAGS: "-I${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include"
          LDFLAGS: "-L${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/lib"
          PKG_CONFIG_ALLOW_CROSS: "1"
          FFMPEG_DIR: ${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}
          FFMPEG_INCLUDE_DIR: ${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include
          FFMPEG_LIB_DIR: ${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/lib
        run: |
          rustup target add ${{ matrix.job.target }}
          # Set up environment for FFmpeg dependencies
          export VCPKG_ROOT=${{ env.VCPKG_ROOT }}
          export VCPKG_DEFAULT_TRIPLET=${{ matrix.job.vcpkg-triplet }}
          export PKG_CONFIG_PATH=${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/lib/pkgconfig
          export CMAKE_PREFIX_PATH=${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}
          export CFLAGS="-I${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include"
          export CPPFLAGS="-I${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include"
          export LDFLAGS="-L${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/lib"
          export PKG_CONFIG_ALLOW_CROSS=1
          
          # Create .cargo/config.toml to help find FFmpeg
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [target.aarch64-apple-ios]
          linker = "clang"
          rustflags = [
            "-C", "link-arg=-L${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/lib",
            "-C", "link-arg=-I${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include"
          ]
          
          [env]
          VCPKG_ROOT = "${{ env.VCPKG_ROOT }}"
          VCPKG_DEFAULT_TRIPLET = "${{ matrix.job.vcpkg-triplet }}"
          PKG_CONFIG_PATH = "${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/lib/pkgconfig"
          CMAKE_PREFIX_PATH = "${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}"
          EOF
          
          # Verify FFmpeg installation
          echo "Checking FFmpeg installation..."
          ls -la ${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include/
          ls -la ${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/lib/
          
          # Check pkg-config
          echo "Checking pkg-config..."
          pkg-config --list-all | grep -i ffmpeg || echo "No FFmpeg found in pkg-config"
          
          # Create a temporary build script for hwcodec if needed
          echo "Creating temporary build configuration for hwcodec..."
          mkdir -p .cargo
          cat >> .cargo/config.toml << EOF
          
          [build]
          target = "aarch64-apple-ios"
          
          [target.aarch64-apple-ios]
          ar = "ar"
          linker = "clang"
          rustflags = [
            "-C", "link-arg=-L${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/lib",
            "-C", "link-arg=-I${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include",
            "-C", "link-arg=-lavcodec",
            "-C", "link-arg=-lavutil",
            "-C", "link-arg=-lavformat",
            "-C", "link-arg=-lswscale",
            "-C", "link-arg=-lswresample"
          ]
          EOF
          
          # Create symlinks for FFmpeg headers
          echo "Creating symlinks for FFmpeg headers..."
          mkdir -p /tmp/ffmpeg-headers
          ln -sf ${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include/* /tmp/ffmpeg-headers/
          export C_INCLUDE_PATH="/tmp/ffmpeg-headers:${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include"
          export CPP_INCLUDE_PATH="/tmp/ffmpeg-headers:${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include"
          
          # Set additional environment variables that hwcodec might need
          export FFMPEG_DIR="${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}"
          export FFMPEG_INCLUDE_DIR="${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/include"
          export FFMPEG_LIB_DIR="${{ env.VCPKG_ROOT }}/installed/${{ matrix.job.vcpkg-triplet }}/lib"
          
          cargo build --features flutter,hwcodec --release --target aarch64-apple-ios --lib
          
      - name: Upload liblibrustdesk.a Artifacts
        uses: actions/upload-artifact@master
        with:
          name: liblibrustdesk.a
          path: target/aarch64-apple-ios/release/liblibrustdesk.a

      # - name: Upload Artifacts
      #   # if: env.ANDROID_SIGNING_KEY != null && env.UPLOAD_ARTIFACT == 'true'
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.apk
      #     path: flutter/build/ios/ipa/*.ipa

      # - name: Publish ipa package
      #   # if: env.ANDROID_SIGNING_KEY != null && env.UPLOAD_ARTIFACT == 'true'
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     prerelease: true
      #     tag_name: ${{ env.TAG_NAME }}
      #     files: |
      #       flutter/build/ios/ipa/*.ipa